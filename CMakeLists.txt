CMAKE_MINIMUM_REQUIRED(VERSION 3.1.0)

PROJECT(emic C)

IF(POLICY CMP0072)
	CMAKE_POLICY(SET CMP0072 NEW)
ENDIF()

# Additional flags for all build types
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -pedantic -std=c99 -O3 -fomit-frame-pointer -g")

# Find all source files
FILE(GLOB_RECURSE PROJECT_SOURCES CONFIGURE_DEPENDS "src/*.c")

# Find all directories with headers
FILE(GLOB_RECURSE PROJECT_HEADERS CONFIGURE_DEPENDS "src/*.h")
SET(PROJECT_INCLUDE_DIRS "")
FOREACH (_headerFile ${PROJECT_HEADERS})
	GET_FILENAME_COMPONENT(_dir ${_headerFile} PATH)
	LIST(APPEND PROJECT_INCLUDE_DIRS ${_dir})
ENDFOREACH()
LIST(REMOVE_DUPLICATES PROJECT_INCLUDE_DIRS)

FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(glfw3 3.3 REQUIRED)
FIND_PACKAGE(GLEW REQUIRED)

IF(DEFINED ENV{GITHUB_REF_NAME} AND DEFINED ENV{GITHUB_SHA})
	SET(GITHUB_BUILT 1)
	SET(GIT_BRANCH "$ENV{GITHUB_REF_NAME}")
	SET(GIT_COMMIT_HASH "$ENV{GITHUB_SHA}")
ELSE()
	SET(GITHUB_BUILT 0)
	EXECUTE_PROCESS(
		COMMAND git rev-parse --abbrev-ref HEAD
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
		OUTPUT_VARIABLE GIT_BRANCH
		COMMAND_ECHO STDOUT
		ECHO_OUTPUT_VARIABLE
		ECHO_ERROR_VARIABLE
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)
	EXECUTE_PROCESS(
		COMMAND git rev-parse HEAD
		WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
		OUTPUT_VARIABLE GIT_COMMIT_HASH
		COMMAND_ECHO STDOUT
		ECHO_OUTPUT_VARIABLE
		ECHO_ERROR_VARIABLE
		OUTPUT_STRIP_TRAILING_WHITESPACE
	)
ENDIF()

ADD_EXECUTABLE(emic WIN32 ${PROJECT_SOURCES})
TARGET_INCLUDE_DIRECTORIES(emic PRIVATE ${PROJECT_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(emic OpenGL::GL GLEW::GLEW glfw)
TARGET_COMPILE_DEFINITIONS (emic PRIVATE "-DGIT_COMMIT_HASH=\"${GIT_COMMIT_HASH}\"" "-DGIT_BRANCH=\"${GIT_BRANCH}\"" "-DGITHUB_BUILT=\"${GITHUB_BUILT}\"")
